'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.4952
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Ds_Traslados"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Ds_Traslados
    Inherits Global.System.Data.DataSet
    
    Private tableDT_TRASLADOS As DT_TRASLADOSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DT_TRASLADOS")) Is Nothing) Then
                MyBase.Tables.Add(New DT_TRASLADOSDataTable(ds.Tables("DT_TRASLADOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DT_TRASLADOS() As DT_TRASLADOSDataTable
        Get
            Return Me.tableDT_TRASLADOS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Ds_Traslados = CType(MyBase.Clone,Ds_Traslados)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DT_TRASLADOS")) Is Nothing) Then
                MyBase.Tables.Add(New DT_TRASLADOSDataTable(ds.Tables("DT_TRASLADOS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDT_TRASLADOS = CType(MyBase.Tables("DT_TRASLADOS"),DT_TRASLADOSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDT_TRASLADOS) Is Nothing) Then
                Me.tableDT_TRASLADOS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Ds_Traslados"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Ds_Traslados.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDT_TRASLADOS = New DT_TRASLADOSDataTable
        MyBase.Tables.Add(Me.tableDT_TRASLADOS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDT_TRASLADOS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Ds_Traslados = New Ds_Traslados
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DT_TRASLADOSRowChangeEventHandler(ByVal sender As Object, ByVal e As DT_TRASLADOSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DT_TRASLADOSDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDOCUMENTO As Global.System.Data.DataColumn
        
        Private columnUSUARIO_DE As Global.System.Data.DataColumn
        
        Private columnUSUARIO_A As Global.System.Data.DataColumn
        
        Private columnDESCRIPCIOM As Global.System.Data.DataColumn
        
        Private columnMARCA As Global.System.Data.DataColumn
        
        Private columnMODELO As Global.System.Data.DataColumn
        
        Private columnSERIE As Global.System.Data.DataColumn
        
        Private columnCOD_SBN As Global.System.Data.DataColumn
        
        Private columnVELOSIDAD As Global.System.Data.DataColumn
        
        Private columnCAPACIDAD As Global.System.Data.DataColumn
        
        Private columnAREA_DE As Global.System.Data.DataColumn
        
        Private columnAREA_A As Global.System.Data.DataColumn
        
        Private columnFECHA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DT_TRASLADOS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DOCUMENTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDOCUMENTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property USUARIO_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSUARIO_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPCIOMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPCIOM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MARCAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMARCA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MODELOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SERIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property COD_SBNColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOD_SBN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VELOSIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVELOSIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAPACIDADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAPACIDAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREA_DEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREA_DE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AREA_AColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAREA_A
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FECHAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFECHA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DT_TRASLADOSRow
            Get
                Return CType(Me.Rows(index),DT_TRASLADOSRow)
            End Get
        End Property
        
        Public Event DT_TRASLADOSRowChanging As DT_TRASLADOSRowChangeEventHandler
        
        Public Event DT_TRASLADOSRowChanged As DT_TRASLADOSRowChangeEventHandler
        
        Public Event DT_TRASLADOSRowDeleting As DT_TRASLADOSRowChangeEventHandler
        
        Public Event DT_TRASLADOSRowDeleted As DT_TRASLADOSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDT_TRASLADOSRow(ByVal row As DT_TRASLADOSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDT_TRASLADOSRow(ByVal DOCUMENTO As String, ByVal USUARIO_DE As String, ByVal USUARIO_A As String, ByVal DESCRIPCIOM As String, ByVal MARCA As String, ByVal MODELO As String, ByVal SERIE As String, ByVal COD_SBN As String, ByVal VELOSIDAD As String, ByVal CAPACIDAD As String, ByVal AREA_DE As String, ByVal AREA_A As String, ByVal FECHA As String) As DT_TRASLADOSRow
            Dim rowDT_TRASLADOSRow As DT_TRASLADOSRow = CType(Me.NewRow,DT_TRASLADOSRow)
            Dim columnValuesArray() As Object = New Object() {DOCUMENTO, USUARIO_DE, USUARIO_A, DESCRIPCIOM, MARCA, MODELO, SERIE, COD_SBN, VELOSIDAD, CAPACIDAD, AREA_DE, AREA_A, FECHA}
            rowDT_TRASLADOSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDT_TRASLADOSRow)
            Return rowDT_TRASLADOSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DT_TRASLADOSDataTable = CType(MyBase.Clone,DT_TRASLADOSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DT_TRASLADOSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDOCUMENTO = MyBase.Columns("DOCUMENTO")
            Me.columnUSUARIO_DE = MyBase.Columns("USUARIO_DE")
            Me.columnUSUARIO_A = MyBase.Columns("USUARIO_A")
            Me.columnDESCRIPCIOM = MyBase.Columns("DESCRIPCIOM")
            Me.columnMARCA = MyBase.Columns("MARCA")
            Me.columnMODELO = MyBase.Columns("MODELO")
            Me.columnSERIE = MyBase.Columns("SERIE")
            Me.columnCOD_SBN = MyBase.Columns("COD_SBN")
            Me.columnVELOSIDAD = MyBase.Columns("VELOSIDAD")
            Me.columnCAPACIDAD = MyBase.Columns("CAPACIDAD")
            Me.columnAREA_DE = MyBase.Columns("AREA_DE")
            Me.columnAREA_A = MyBase.Columns("AREA_A")
            Me.columnFECHA = MyBase.Columns("FECHA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDOCUMENTO = New Global.System.Data.DataColumn("DOCUMENTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDOCUMENTO)
            Me.columnUSUARIO_DE = New Global.System.Data.DataColumn("USUARIO_DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_DE)
            Me.columnUSUARIO_A = New Global.System.Data.DataColumn("USUARIO_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSUARIO_A)
            Me.columnDESCRIPCIOM = New Global.System.Data.DataColumn("DESCRIPCIOM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPCIOM)
            Me.columnMARCA = New Global.System.Data.DataColumn("MARCA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMARCA)
            Me.columnMODELO = New Global.System.Data.DataColumn("MODELO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELO)
            Me.columnSERIE = New Global.System.Data.DataColumn("SERIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIE)
            Me.columnCOD_SBN = New Global.System.Data.DataColumn("COD_SBN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOD_SBN)
            Me.columnVELOSIDAD = New Global.System.Data.DataColumn("VELOSIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVELOSIDAD)
            Me.columnCAPACIDAD = New Global.System.Data.DataColumn("CAPACIDAD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAPACIDAD)
            Me.columnAREA_DE = New Global.System.Data.DataColumn("AREA_DE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA_DE)
            Me.columnAREA_A = New Global.System.Data.DataColumn("AREA_A", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAREA_A)
            Me.columnFECHA = New Global.System.Data.DataColumn("FECHA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFECHA)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDT_TRASLADOSRow() As DT_TRASLADOSRow
            Return CType(Me.NewRow,DT_TRASLADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DT_TRASLADOSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DT_TRASLADOSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DT_TRASLADOSRowChangedEvent) Is Nothing) Then
                RaiseEvent DT_TRASLADOSRowChanged(Me, New DT_TRASLADOSRowChangeEvent(CType(e.Row,DT_TRASLADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DT_TRASLADOSRowChangingEvent) Is Nothing) Then
                RaiseEvent DT_TRASLADOSRowChanging(Me, New DT_TRASLADOSRowChangeEvent(CType(e.Row,DT_TRASLADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DT_TRASLADOSRowDeletedEvent) Is Nothing) Then
                RaiseEvent DT_TRASLADOSRowDeleted(Me, New DT_TRASLADOSRowChangeEvent(CType(e.Row,DT_TRASLADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DT_TRASLADOSRowDeletingEvent) Is Nothing) Then
                RaiseEvent DT_TRASLADOSRowDeleting(Me, New DT_TRASLADOSRowChangeEvent(CType(e.Row,DT_TRASLADOSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDT_TRASLADOSRow(ByVal row As DT_TRASLADOSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As Ds_Traslados = New Ds_Traslados
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DT_TRASLADOSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DT_TRASLADOSRow
        Inherits Global.System.Data.DataRow
        
        Private tableDT_TRASLADOS As DT_TRASLADOSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDT_TRASLADOS = CType(Me.Table,DT_TRASLADOSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DOCUMENTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.DOCUMENTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DOCUMENTO' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.DOCUMENTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.USUARIO_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_DE' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.USUARIO_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property USUARIO_A() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.USUARIO_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'USUARIO_A' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.USUARIO_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPCIOM() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.DESCRIPCIOMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DESCRIPCIOM' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.DESCRIPCIOMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MARCA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.MARCAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MARCA' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.MARCAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MODELO() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.MODELOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MODELO' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.MODELOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SERIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.SERIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SERIE' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.SERIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property COD_SBN() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.COD_SBNColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'COD_SBN' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.COD_SBNColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VELOSIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.VELOSIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VELOSIDAD' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.VELOSIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAPACIDAD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.CAPACIDADColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAPACIDAD' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.CAPACIDADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREA_DE() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.AREA_DEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AREA_DE' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.AREA_DEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AREA_A() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.AREA_AColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AREA_A' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.AREA_AColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FECHA() As String
            Get
                Try 
                    Return CType(Me(Me.tableDT_TRASLADOS.FECHAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FECHA' de la tabla 'DT_TRASLADOS' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDT_TRASLADOS.FECHAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDOCUMENTONull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.DOCUMENTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDOCUMENTONull()
            Me(Me.tableDT_TRASLADOS.DOCUMENTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_DENull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.USUARIO_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_DENull()
            Me(Me.tableDT_TRASLADOS.USUARIO_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUSUARIO_ANull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.USUARIO_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUSUARIO_ANull()
            Me(Me.tableDT_TRASLADOS.USUARIO_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPCIOMNull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.DESCRIPCIOMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPCIOMNull()
            Me(Me.tableDT_TRASLADOS.DESCRIPCIOMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMARCANull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.MARCAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMARCANull()
            Me(Me.tableDT_TRASLADOS.MARCAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMODELONull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.MODELOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMODELONull()
            Me(Me.tableDT_TRASLADOS.MODELOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSERIENull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.SERIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSERIENull()
            Me(Me.tableDT_TRASLADOS.SERIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCOD_SBNNull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.COD_SBNColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCOD_SBNNull()
            Me(Me.tableDT_TRASLADOS.COD_SBNColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVELOSIDADNull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.VELOSIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVELOSIDADNull()
            Me(Me.tableDT_TRASLADOS.VELOSIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAPACIDADNull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.CAPACIDADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAPACIDADNull()
            Me(Me.tableDT_TRASLADOS.CAPACIDADColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREA_DENull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.AREA_DEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREA_DENull()
            Me(Me.tableDT_TRASLADOS.AREA_DEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAREA_ANull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.AREA_AColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAREA_ANull()
            Me(Me.tableDT_TRASLADOS.AREA_AColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFECHANull() As Boolean
            Return Me.IsNull(Me.tableDT_TRASLADOS.FECHAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFECHANull()
            Me(Me.tableDT_TRASLADOS.FECHAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DT_TRASLADOSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DT_TRASLADOSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DT_TRASLADOSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DT_TRASLADOSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
